services:
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      # POSTGRES_DB: ${DATABASE_NAME}
      # POSTGRES_USER: ${DATABASE_USER}
      # POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: gutendex
      POSTGRES_USER: gutendex
      POSTGRES_PASSWORD: a-long-string-of-random-characters
    ports:
      - "5432:5432"
    networks:
      - backend  

  app:
    build:
      context: .
      dockerfile: Dockerfile.app
    restart: always
    env_file:
      - gutendex/.env
    volumes:
      - .:/app
    environment:
      # DATABASE_HOST: postgres
      # DATABASE_NAME: ${DATABASE_NAME}
      # DATABASE_USER: ${DATABASE_USER}
      # DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      # SECRET_KEY: ${SECRET_KEY}
      DATABASE_HOST: postgres
      DATABASE_NAME: gutendex
      DATABASE_USER: gutendex
      DATABASE_PASSWORD: a-long-string-of-random-characters
      SECRET_KEY: another-long-string-of-random-characters
    depends_on:
      - postgres
    ports:
      - "8000:8000"
    networks:
      - frontend
      - backend 

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/app/staticfiles  # תיקיית הסטטיים לאחר collectstatic
      - ./media:/app/media  # תיקיית המדיה
    ports:
      - "80:80"
    depends_on:
      - app  # Nginx תלוי בשירות האפליקציה
    networks:
      - frontend
      # - backend          

volumes:
  postgres_data:

networks:
  frontend:  # For nginx<->app communication
  backend:   # For app<->postgres communication
